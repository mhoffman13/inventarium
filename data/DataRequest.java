package inventarium.data;

/**
 * Handle getting and setting database data
 * @author Alex Howard
 */

import inventarium.model.Category;
import inventarium.model.Inventory;
import inventarium.model.Product;
import inventarium.model.Vendor;
import inventarium.utils.Address;
import inventarium.utils.Status;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public final class DataRequest {
	private DataRequest() {}
	private static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
	private static String dbName="qa_ivt_db";
	private static Connection conn = null;
	private static Statement stmt = null;
	public static void initialize(){
		//Load DB driver
		try {
			Class.forName(driver);
			System.out.println("Successfully loaded DB driver");
		} catch (ClassNotFoundException e) {
			System.out.println("Failed to load DB driver");
			e.printStackTrace();
			System.exit(0);
		}
		String connectionURL = "jdbc:derby:" + dbName + ";create=true";
		System.out.println("Attempting to connect to database " + dbName + "...");
		//Connect to DB, create one if given DB doesn't exist
		try {
			conn = DriverManager.getConnection(connectionURL);		 
			System.out.println("Connected to database " + dbName);
		} catch (Throwable e) {
			System.out.println("Failed to connect to database" + dbName);
			e.printStackTrace();
			System.exit(0);
		}
		if(!tablesExist()) {
			System.out.println("No db found, creating new tables");
			try{
				stmt = conn.createStatement();
				stmt.execute("CREATE TABLE Category("
					+ "id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
					+ "name VARCHAR(100), "
					+ "description VARCHAR(200), "
					+ "status VARCHAR(10))");
				stmt.execute("CREATE TABLE Vendor("
					+ "id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
					+ "name VARCHAR(100), "
					+ "status VARCHAR(10), "
					+ "description VARCHAR(200), "
					+ "address_line1 VARCHAR(100), "
					+ "address_line2 VARCHAR(100), "
					+ "address_city VARCHAR(100), "
					+ "address_state VARCHAR(2), "
					+ "address_zip VARCHAR(5), "
					+ "phone VARCHAR(12), "
					+ "email VARCHAR(100), "
					+ "contact_name VARCHAR(100))");
				stmt.execute("CREATE TABLE Product("
					+ "id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
					+ "name VARCHAR(100), "
					+ "description VARCHAR(200), "
					+ "status VARCHAR(10), "
					+ "sku VARCHAR(100), "
					+ "quantity INT, "
					+ "low_quantity INT, "
					+ "is_low SMALLINT, "
					+ "category_id INT, "
					+ "vendor_id INT, "
					+ "FOREIGN KEY(category_id) REFERENCES Category(id) ON DELETE SET NULL, "
					+ "FOREIGN KEY(vendor_id) REFERENCES Vendor(id) ON DELETE SET NULL)");
				stmt.execute("CREATE TABLE Inventory("
					+ "id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
					+ "product_id INT, "
					+ "date DATE, "
					+ "adjustment INT, "
					+ "FOREIGN KEY(product_id) REFERENCES Product(id) ON DELETE CASCADE)");
				stmt.close();
			} catch (SQLException e) {
				System.out.println(e); 
			}
		}
	}
	private static boolean tablesExist() {
		try {
			stmt = conn.createStatement();
			stmt.execute("SELECT * FROM Product");
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			return false;
		}
	}
	private static String sanitize(String input) {
		if(input==null){
			return "";
		}
		return input.replaceAll("'", "''");
	}
	public static boolean insertRecord( Vendor vend ) {
		String query = "INSERT INTO Vendor (name, status, description, address_line1, address_line2, "
				+ "address_city, address_state, address_zip, phone, email, contact_name) VALUES ('"
				+ sanitize(vend.getName()) + "', '"
				+ vend.getStatus() + "', '"
				+ sanitize(vend.getDescription()) + "', '"
				+ sanitize(vend.getAddress().getLine1()) + "', '"
				+ sanitize(vend.getAddress().getLine2()) + "', '"
				+ sanitize(vend.getAddress().getCity()) + "', '"
				+ sanitize(vend.getAddress().getState()) + "', '"
				+ sanitize(vend.getAddress().getZip()) + "', '"
				+ sanitize(vend.getPhone()) + "', '"
				+ sanitize(vend.getEmail()) + "', '"
				+ sanitize(vend.getContactName()) + "')";
		try {
			System.out.println("Executing query: " + query); 
			stmt = conn.createStatement();
			stmt.execute(query, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			vend.setUniqueId(Integer.valueOf(rs.getInt(1)));
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			System.out.println(e);
			return false;
		}
	}
	public static boolean insertRecord( Product prod ) {
		String query = "INSERT INTO Product (name, description, status, sku, quantity, "
				+ "low_quantity, is_low, category_id, vendor_id ) VALUES ('"
				+ sanitize(prod.getName()) + "', '"
				+ sanitize(prod.getDescription()) + "', '"
				+ prod.getStatus() + "', '"
				+ sanitize(prod.getSku()) + "', "
				+ prod.getQuantity() + ", "
				+ prod.getLowQuantity() + ", "
				+ (prod.isLowProperty().get() ? 1 : 0);
		if(prod.getCategoryName()==null || prod.getCategory().getUniqueId()==0){
			query += ", " + null;
		}else{
			query += ", " + prod.getCategory().getUniqueId();
		}
		if(prod.getVendorName()==null || prod.getVendor().getUniqueId()==0){
			query += ", " + null; 
		}else{
			query += ", " + prod.getVendor().getUniqueId();
		}
		query += ")";
				 
		try {
			System.out.println("Executing query: " + query); 
			stmt = conn.createStatement();
			stmt.execute(query, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			prod.setUniqueId(Integer.valueOf(rs.getInt(1)));
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			System.out.println(e);
			return false;
		}
	}
	public static boolean insertRecord( Category cat ) {
		String query = "INSERT INTO Category (name, description, status) VALUES ('"
				+ sanitize(cat.getName()) + "', '"
				+ sanitize(cat.getDescription()) + "', '"
				+ cat.getStatus() + "')";
		try {
			System.out.println("Executing query: " + query); 
			stmt = conn.createStatement();
			stmt.execute(query, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			cat.setUniqueId(Integer.valueOf(rs.getInt(1)));
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			System.out.println(e);
			return false;
		}
	}
	public static boolean insertRecord( Inventory inv ) {
		String query = "INSERT INTO Inventory (product_id, date, adjustment) VALUES ("
				+ inv.getProductId() + ", '"
				+ inv.getDate() + "', "
				+ inv.getAdjustment() + ")";
		try {
			System.out.println("Executing query: " + query); 
			stmt = conn.createStatement();
			stmt.execute(query, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			inv.setUniqueId(Integer.valueOf(rs.getInt(1)));
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			System.out.println(e);
			return false;
		}
	}
	public static boolean updateRecord( Vendor vend ) {
		String query = "UPDATE Vendor SET "
				+ "name='" + sanitize(vend.getName()) + "', "
				+ "status='" + vend.getStatus() + "', "
				+ "description='" + sanitize(vend.getDescription()) + "', "
				+ "address_line1='" + sanitize(vend.getAddress().getLine1()) + "', "
				+ "address_line2='" + sanitize(vend.getAddress().getLine2()) + "', "
				+ "address_city='" + sanitize(vend.getAddress().getCity()) + "', "
				+ "address_state='" + sanitize(vend.getAddress().getState()) + "', "
				+ "address_zip='" + sanitize(vend.getAddress().getZip()) + "', "
				+ "phone='" + sanitize(vend.getPhone()) + "', "
				+ "email='" + sanitize(vend.getEmail()) + "', "
				+ "contact_name='" + sanitize(vend.getContactName()) + "' "
				+ "WHERE id = " + vend.getUniqueId();
		return runQuery(query);
	}
	public static boolean updateRecord( Product prod ) {
		String query = "UPDATE Product SET "
				+ "name='" + sanitize(prod.getName()) + "', "
				+ "description='" + sanitize(prod.getDescription()) + "', "
				+ "status='" + prod.getStatus() + "', "
				+ "sku='" + sanitize(prod.getSku()) + "', "
				+ "quantity=" + prod.getQuantity() + ", "
				+ "low_quantity=" + prod.getLowQuantity() + ", "
				+ "is_low=" + (prod.isLowProperty().get() ? 1 : 0) + ", ";
		if(prod.getCategory() == null || prod.getCategory().getUniqueId() == 0)
			query += "category_id=null, ";
		else
			query += "category_id=" + prod.getCategory().getUniqueId() + ", ";
		if(prod.getVendor() == null || prod.getVendor().getUniqueId() == 0)
			query += "vendor_id=null ";
		else
			query += "vendor_id=" + prod.getVendor().getUniqueId() + " ";
		query += "WHERE id = " + prod.getUniqueId();
		return runQuery(query);
	}
	public static boolean updateRecord( Category cat ) {
		String query = "UPDATE Category SET "
				+ "name='" + sanitize(cat.getName()) + "', "
				+ "description='" + sanitize(cat.getDescription()) + "', "
				+ "status='" + cat.getStatus() + "' "
				+ "WHERE id = " + cat.getUniqueId();
		return runQuery(query);
	}
	public static boolean updateRecord( Inventory inv ) {
		String query = "UPDATE Inventory SET "
				+ "product_id=" + inv.getProductId() + ", "
				+ "date='" + inv.getDate().toString() + "', "
				+ "adjustment=" + inv.getAdjustment() + " "
				+ "WHERE id = " + inv.getUniqueId();
		return runQuery(query);
	}
	public static boolean runQuery( String query ) {
		try {
			System.out.println("Executing query: " + query); 
			stmt = conn.createStatement();
			stmt.execute(query);
			stmt.close();
			return true;
		}
		catch (SQLException e) {
			System.out.println(e); 
			return false;
		}
	}
	public static boolean removeRecord(Vendor vendor) {
		Integer id = vendor.getUniqueId();
		String query = "DELETE FROM Vendor WHERE id=" + id;
		return runQuery(query);
	}
	public static boolean removeRecord(Product product) {
		Integer id = product.getUniqueId();
		String query = "DELETE FROM Product WHERE id=" + id;
		return runQuery(query);
	}
	public static boolean removeRecord(Category category) {
		Integer id = category.getUniqueId();
		String query = "DELETE FROM Category WHERE id=" + id;
		return runQuery(query);
	}
	public static String findProductName(Integer id) throws SQLException {
		String query = "SELECT * FROM Product WHERE id=" + id;
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		String name;
		if(rs.next())
			name = rs.getString("name");
		else {
			System.out.println("No name found for product id " + id);
			name = null;
		}
		stmt.close();
		return name;
	}
	public static List<Product> search(Product product, List<String> searchTerms) throws SQLException {
		List<Product> results = new ArrayList<Product>();
		String query = "SELECT * FROM Product WHERE ";// + columnName + "='" + searchTerm + "'";
		for (String term : searchTerms) {
		    // iterate through searchTerms
			// Alex: We might not use all of these, but it won't hurt to have them here.
			if(term.equalsIgnoreCase("uniqueId")){
				query += "id=" + product.getUniqueId();
			}else if(term.equalsIgnoreCase("name")){
				query += "name LIKE '" + sanitize(product.getName()) + "'";
			}else if(term.equalsIgnoreCase("status")){
				query += "status='" + product.getStatus() + "'";
			}else if(term.equalsIgnoreCase("description")){
				query += "description LIKE '" + sanitize(product.getDescription()) + "'";
			}else if(term.equalsIgnoreCase("sku")){
				query += "sku LIKE '" + sanitize(product.getSku()) + "'";
			}else if(term.equalsIgnoreCase("quantity")){
				query += "quantity=" + product.getQuantity();
			}else if(term.equalsIgnoreCase("lowQuantity")){
				query += "low_quantity=" + product.getLowQuantity();
			}else if(term.equalsIgnoreCase("vendor")){
				query += "vendor_id=" + product.getVendorName();
			}else if(term.equalsIgnoreCase("category")){
				query += "category_id=" + product.getCategoryName();
			}else if(term.equalsIgnoreCase("isLow")){
				query += "is_low=" + (product.isLowProperty().get() ? 1 : 0);
			}
			query += " and ";
		}
		// remove the last stray " and "
		query = query.substring(0, query.length() - 5);
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		Statement secondaryStatement = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Category prodCategory;
		Vendor prodVendor;
		ResultSet catRs;
		ResultSet vendRs;
		Address vendAddress;
		Product productResult;
		while(rs.next()){
			// Fetch product's vendor
			query = "SELECT * FROM Vendor WHERE id = " + rs.getInt("vendor_id");
			vendRs = secondaryStatement.executeQuery(query);
			vendRs.next();
			vendAddress = new Address(
					vendRs.getString("address_line1"),
					vendRs.getString("address_line2"),
					vendRs.getString("address_city"),
					vendRs.getString("address_state"),
					vendRs.getString("address_zip"));
			prodVendor = new Vendor(
					Integer.valueOf(vendRs.getInt("id")),
					vendRs.getString("name"),
					vendRs.getString("description"),
					vendRs.getString("contact_name"), 
					vendRs.getString("phone"), 
					vendAddress, 
					vendRs.getString("email"), 
					vendRs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			
			// Fetch product's category
			query = "SELECT * FROM Category WHERE id = " + rs.getInt("category_id");
			catRs = secondaryStatement.executeQuery(query);
			catRs.next();
			prodCategory = new Category(
					Integer.valueOf(catRs.getInt("id")),
					catRs.getString("name"),
					catRs.getString("description"),
					catRs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			// Build product
			productResult = new Product(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED,
					rs.getString("description"),
					rs.getString("sku"),
					rs.getInt("quantity"),
					rs.getInt("low_quantity"),
					prodCategory,
					prodVendor,
					null); // TODO: pass product's inventory list
			results.add(productResult);
		}
		secondaryStatement.close();
		stmt.close();
		return results;
	}
	public static Set<Product> getAll(Product product) throws SQLException {
		Set<Product> results = new HashSet<Product>();
		String query = "SELECT * FROM Product ";
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		Statement secondaryStatement = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Category prodCategory = null;
		Vendor prodVendor = null;
		ResultSet catRs;
		ResultSet vendRs;
		Address vendAddress;
		Product productResult;
		while(rs.next()){
			// Fetch product's vendor
			if(rs.getInt("vendor_id") > 0){
				query = "SELECT * FROM Vendor WHERE id = " + rs.getInt("vendor_id");
				vendRs = secondaryStatement.executeQuery(query);
				vendRs.next();
				vendAddress = new Address(
						vendRs.getString("address_line1"),
						vendRs.getString("address_line2"),
						vendRs.getString("address_city"),
						vendRs.getString("address_state"),
						vendRs.getString("address_zip"));
				prodVendor = new Vendor(
						Integer.valueOf(vendRs.getInt("id")),
						vendRs.getString("name"),
						vendRs.getString("description"),
						vendRs.getString("contact_name"), 
						vendRs.getString("phone"), 
						vendAddress, 
						vendRs.getString("email"), 
						vendRs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			}
			// Fetch product's category
			if(rs.getInt("category_id") > 0){
				query = "SELECT * FROM Category WHERE id = " + rs.getInt("category_id");
				catRs = secondaryStatement.executeQuery(query);
				catRs.next();
				prodCategory = new Category(
						Integer.valueOf(catRs.getInt("id")),
						catRs.getString("name"),
						catRs.getString("description"),
						catRs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			}	
			// Build product
			productResult = new Product(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED,
					rs.getString("description"),
					rs.getString("sku"),
					rs.getInt("quantity"),
					rs.getInt("low_quantity"),
					prodCategory,
					prodVendor,
					null); // TODO: pass product's inventory list
			results.add(productResult);
		}
		secondaryStatement.close();
		stmt.close();
		return results;
	}
	public static Set<Vendor> search(Vendor vendor, List<String> searchTerms) throws SQLException {
		Set<Vendor> results = new HashSet<Vendor>();
		String query = "SELECT * FROM Vendor WHERE ";
		for (String term : searchTerms) {
		    // iterate through searchTerms
			if(term.equalsIgnoreCase("uniqueId")){
				query += "id=" + vendor.getUniqueId();
			}else if(term.equalsIgnoreCase("name")){
				query += "name LIKE '" + sanitize(vendor.getName()) + "'";
			}else if(term.equalsIgnoreCase("description")){
				query += "description LIKE '" + sanitize(vendor.getDescription()) + "'";
			}else if(term.equalsIgnoreCase("contactName")){
				query += "contact_name LIKE '" + sanitize(vendor.getContactName()) + "'";
			}else if(term.equalsIgnoreCase("phone")){
				query += "phone='" + sanitize(vendor.getPhone()) + "'";
			}else if(term.equalsIgnoreCase("email")){
				query += "email LIKE '" + sanitize(vendor.getDescription()) + "'";
			}else if(term.equalsIgnoreCase("status")){
				query += "status='" + vendor.getStatus() + "'";
			}
			query += " and ";
		}
		// remove the last stray " and "
		query = query.substring(0, query.length() - 5);
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Address address;
		Vendor vendorResult;
		while(rs.next()){
			// Build vendor's address
			address = new Address(
					rs.getString("address_line1"),
					rs.getString("address_line2"),
					rs.getString("address_city"),
					rs.getString("address_state"),
					rs.getString("address_zip"));
			// Build vendor
			vendorResult = new Vendor(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("description"),
					rs.getString("contact_name"),
					rs.getString("phone"),
					address,
					rs.getString("email"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			results.add(vendorResult);
		}
		stmt.close();
		return results;
	}
	
	public static Set<Vendor> getAll(Vendor vendor) throws SQLException {
		Set<Vendor> results = new HashSet<Vendor>();
		String query = "SELECT * FROM Vendor";
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Address address;
		Vendor vendorResult;
		while(rs.next()){
			// Build vendor's address
			address = new Address(
					rs.getString("address_line1"),
					rs.getString("address_line2"),
					rs.getString("address_city"),
					rs.getString("address_state"),
					rs.getString("address_zip"));
			// Build vendor
			vendorResult = new Vendor(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("description"),
					rs.getString("contact_name"),
					rs.getString("phone"),
					address,
					rs.getString("email"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			results.add(vendorResult);
		}
		stmt.close();
		return results;
	}
	
	public static Set<Category> search(Category category, List<String> searchTerms) throws SQLException {
		Set<Category> results = new HashSet<Category>();
		String query = "SELECT * FROM Category WHERE ";
		for (String term : searchTerms) {
		    // iterate through searchTerms
			if(term.equalsIgnoreCase("uniqueId")){
				query += "id=" + category.getUniqueId();
			}else if(term.equalsIgnoreCase("name")){
				query += "name LIKE '" + sanitize(category.getName()) + "'";
			}else if(term.equalsIgnoreCase("description")){
				query += "description LIKE '" + sanitize(category.getDescription()) + "'";
			}else if(term.equalsIgnoreCase("status")){
				query += "status='" + category.getStatus() + "'";
			}
			query += " and ";
		}
		// remove the last stray " and "
		query = query.substring(0, query.length() - 5);
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Category categoryResult;
		while(rs.next()){
			categoryResult = new Category(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("description"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			results.add(categoryResult);
		}
		stmt.close();
		return results;
	}
	public static Set<Category> getAll(Category category) throws SQLException {
		Set<Category> results = new HashSet<Category>();
		String query = "SELECT * FROM Category";
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Category categoryResult;
		while(rs.next()){
			categoryResult = new Category(
					Integer.valueOf(rs.getInt("id")),
					rs.getString("name"),
					rs.getString("description"),
					rs.getString("status").equals("ACTIVE") ? Status.ACTIVE : Status.ARCHIVED);
			results.add(categoryResult);
		}
		stmt.close();
		return results;
	}
	public static List<Inventory> search(Inventory inventory, List<String> searchTerms) throws SQLException {
		List<Inventory> results = new ArrayList<Inventory>();
		String query = "SELECT * FROM Inventory WHERE ";
		for (String term : searchTerms) {
			// iterate through searchTerms
			if(term.equalsIgnoreCase("uniqueId")){
				query += "id=" + inventory.getUniqueId();
			}else if(term.equalsIgnoreCase("productId")){
				query += "product_id=" + inventory.getUniqueId();
			}else if(term.equalsIgnoreCase("date")){
				query += "date='" + inventory.getDate().toString() + "'";
			}else if(term.equalsIgnoreCase("adjustment")){
				query += "adjustment=" + inventory.getAdjustment();
			}
			query += " and ";
		}
		// remove the last stray " and "
		query = query.substring(0, query.length() - 5);
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Inventory inventoryResult;
		while(rs.next()){
			inventoryResult = new Inventory(
					Integer.valueOf(rs.getInt("id")),
					Integer.valueOf(rs.getInt("product_id")),
					rs.getDate("date"),
					rs.getInt("adjustment"));
			results.add(inventoryResult);
		}
		stmt.close();
		return results;
	}
	
	public static List<Inventory> getAll(Inventory inventory) throws SQLException {
		List<Inventory> results = new ArrayList<Inventory>();
		String query = "SELECT * FROM Inventory";
		System.out.println("Executing query: " + query); 
		stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		Inventory inventoryResult;
		while(rs.next()){
			inventoryResult = new Inventory(
					Integer.valueOf(rs.getInt("id")),
					Integer.valueOf(rs.getInt("product_id")),
					rs.getDate("date"),
					rs.getInt("adjustment"));
			results.add(inventoryResult);
		}
		stmt.close();
		return results;
	}
}